%{
#include <stdio.h>
extern char* yytext;
extern int yylineno;
void yyerror(const char *s);
int yylex();
int flag_error = 0;

%}
%nonassoc IF2
%nonassoc ELSE
%start START
%token FUNCTION PRINT TEXT QUOTE_MARK CLASS STRUCT LEFT_SQUARE RIGHT_SQUARE ARRAY
%token SEMI_COLON COMMA EQUAL LEFT_PARAN RIGHT_PARAN LEFT_BRACE RIGHT_BRACE
%token  COLON INT_VAL POINT
%token STRCOPY SUBSTRING STRCMP
%token IF WHILE FOR CALL
%token <name> VARIABLE_NAME
%token <value> INT_VALUE BOOL_VALUE STRING_VALUE CHAR_VALUE FLOAT_VALUE
%type <value> VALUE EXP EXP2
%token <data_type> DATA_TYPE
 
%union
{  
    char* data_type;
    char* name;
    char* value;
}
%left OR
%left AND 
%left GRE LES GEQ LEQ NEQ EQ
%left PLUS MINUS
%left MULTIPLY DIVIDE MODULO
%left LEFT_PARAN RIGHT_PARAN

%%

START : STMT SEMI_COLON {;}
      | START STMT SEMI_COLON {;}
      | START PRINT PRINT_LIST SEMI_COLON {;}
      | PRINT PRINT_LIST SEMI_COLON {;}
      | STRUCT STRUCT_BODY {;}
      | START STRUCT STRUCT_BODY {;}
      | LEFT_PARAN EXP2 RIGHT_PARAN SEMI_COLON{;}
      | START LEFT_PARAN EXP2 RIGHT_PARAN SEMI_COLON{;}
      | STR_OPERATION SEMI_COLON {;}
      | START STR_OPERATION SEMI_COLON {;}
      | ARRAY ARRAY_BODY SEMI_COLON {;}
      | START ARRAY ARRAY_BODY SEMI_COLON {;}
      | IF_BODY {;}
      | START IF_BODY {;}
      | WHILE_BODY {;}
      | START WHILE_BODY {;}
      | FOR_BODY {;}
      | START FOR_BODY {;}
      | FUNCTION FUNCTION_ANTET {;}
      | START FUNCTION FUNCTION_ANTET {;}
      | FUNC_CALL SEMI_COLON {;}
      | START  FUNC_CALL SEMI_COLON {;}
      | STRUCT_VALUE {;}
      | START STRUCT_VALUE {;}
       {printf("%s","file validation worked successfully!\n");}
      ;
STRUCT_VALUE :  VARIABLE_NAME POINT VARIABLE_NAME EQUAL EXP SEMI_COLON {
                    };

FUNC_CALL : CALL VARIABLE_NAME LEFT_PARAN FUNC_CALL_PARAM RIGHT_PARAN {;}
          | CALL VARIABLE_NAME LEFT_PARAN FUNC_CALL RIGHT_PARAN {;}

FUNC_CALL_PARAM : EXP {;}          
                | FUNC_CALL_PARAM COMMA EXP {;}
FUNCTION_ANTET : DATA_TYPE VARIABLE_NAME LEFT_PARAN  INT_VALUE COMMA FUNCTION_PARAMETERS RIGHT_PARAN FUNCTION_BODY 
                                                                  {;}

FUNCTION_PARAMETERS : DATA_TYPE VARIABLE_NAME {;}
                                              
                    | FUNCTION_PARAMETERS COMMA DATA_TYPE VARIABLE_NAME {;}

FUNCTION_BODY : LEFT_BRACE FUNC_BLOCK RIGHT_BRACE {;}

FUNC_BLOCK : DATA_TYPE VARIABLE_NAME EQUAL EXP SEMI_COLON {;}  
          |  FUNC_BLOCK DATA_TYPE VARIABLE_NAME EQUAL EXP SEMI_COLON {;}
          |  DATA_TYPE VARIABLE_NAME  SEMI_COLON {;}
          |  FUNC_BLOCK DATA_TYPE VARIABLE_NAME  SEMI_COLON {;}
          |  FUNC_BLOCK ARRAY ARRAY_FUNC SEMI_COLON{;}
          |  ARRAY ARRAY_FUNC SEMI_COLON{;}
          |  PRINT_FUNC SEMI_COLON {;}
          |  FUNC_BLOCK PRINT_FUNC SEMI_COLON {;}

PRINT_FUNC : PRINT VARIABLE_NAME {;}
                                
                               
            | PRINT_FUNC COMMA VARIABLE_NAME {;}
               | PRINT VALUE {;}                      
          | PRINT_FUNC COMMA VALUE {;}                                  
           
ARRAY_FUNC : DATA_TYPE VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE{;}
           | VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE EQUAL VALUE {;}



IF_BODY : IF LEFT_PARAN BOOL_EXP RIGHT_PARAN LEFT_BRACE IF_BLOCK RIGHT_BRACE %prec IF2   {;}
        | IF LEFT_PARAN BOOL_EXP RIGHT_PARAN LEFT_BRACE IF_BLOCK RIGHT_BRACE ELSE LEFT_BRACE IF_BLOCK RIGHT_BRACE{;}

IF_BLOCK :  DATA_TYPE VARIABLE_NAME EQUAL EXP SEMI_COLON {;}  
          |  IF_BLOCK DATA_TYPE VARIABLE_NAME EQUAL EXP SEMI_COLON {;}
          |  DATA_TYPE VARIABLE_NAME  SEMI_COLON {;}
          |  IF_BLOCK DATA_TYPE VARIABLE_NAME  SEMI_COLON {}
          |  IF_BLOCK ARRAY ARRAY_IF SEMI_COLON{;}
          |  ARRAY ARRAY_IF SEMI_COLON{;}
          |  PRINT_IF SEMI_COLON {;}
          |  IF_BLOCK PRINT_IF SEMI_COLON {;}

PRINT_IF : PRINT VARIABLE_NAME {;}
            | PRINT_IF COMMA VARIABLE_NAME {;}
               | PRINT VALUE {;}                      
          | PRINT_IF COMMA VALUE {;}                                  
           
ARRAY_IF : DATA_TYPE VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE{;}
           | VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE EQUAL VALUE {;}



FOR_BLOCK :  DATA_TYPE VARIABLE_NAME EQUAL EXP SEMI_COLON {;}  
          |  FOR_BLOCK DATA_TYPE VARIABLE_NAME EQUAL EXP SEMI_COLON {;}
          |  DATA_TYPE VARIABLE_NAME  SEMI_COLON {;}
          |  FOR_BLOCK DATA_TYPE VARIABLE_NAME  SEMI_COLON {;}
          |  FOR_BLOCK ARRAY ARRAY_FOR SEMI_COLON{;}
          |  ARRAY ARRAY_FOR SEMI_COLON{;}
          |  PRINT_FOR SEMI_COLON {;}
          |  FOR_BLOCK PRINT_FOR SEMI_COLON {;}

PRINT_FOR : PRINT VARIABLE_NAME {;}
            | PRINT_FOR COMMA VARIABLE_NAME {;}
               | PRINT VALUE {;}                      
          | PRINT_FOR COMMA VALUE {;}                                  
           
ARRAY_FOR : DATA_TYPE VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE{;}
           | VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE EQUAL VALUE {;}      


BOOL_EXP : EXP BOOL_TOKENS EXP {;}
         | BOOL_EXP LOGIC_OPERATORS EXP BOOL_TOKENS EXP {;}
         ;

LOGIC_OPERATORS : AND {;}
                | OR {;}         
                ;
BOOL_TOKENS : EQ {;}
            | NEQ {;}
            | GRE {;}
            | LES {;}
            | GEQ {;}
            | LEQ {;}

WHILE_BODY :  WHILE LEFT_PARAN BOOL_EXP RIGHT_PARAN LEFT_BRACE WHILE_BLOCK RIGHT_BRACE {;}

WHILE_BLOCK : DATA_TYPE VARIABLE_NAME EQUAL EXP SEMI_COLON {;}  
          |  WHILE_BLOCK DATA_TYPE VARIABLE_NAME EQUAL EXP SEMI_COLON {;}
          |  DATA_TYPE VARIABLE_NAME  SEMI_COLON {;}
          |  WHILE_BLOCK DATA_TYPE VARIABLE_NAME  SEMI_COLON {;}
          |  WHILE_BLOCK ARRAY ARRAY_WHILE SEMI_COLON{;}
          |  ARRAY ARRAY_WHILE SEMI_COLON{;}
          |  PRINT_WHILE SEMI_COLON {;}
          | WHILE_BLOCK PRINT_WHILE SEMI_COLON {;}


PRINT_WHILE : PRINT VARIABLE_NAME {;}

            | PRINT_WHILE COMMA VARIABLE_NAME {;}
            | PRINT VALUE {;} 

            | PRINT_WHILE COMMA VALUE {;}

ARRAY_WHILE: DATA_TYPE VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE{;}
           | VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE EQUAL VALUE {;}           

FOR_BODY : FOR LEFT_PARAN FOR1 COMMA BOOL_EXP COMMA FOR2 RIGHT_PARAN LEFT_BRACE FOR_BLOCK RIGHT_BRACE{;}

FOR1 :  DATA_TYPE VARIABLE_NAME EQUAL EXP {;}
      | VARIABLE_NAME  EQUAL EXP {;}                          

FOR2 : EXP EQUAL EXP {;} 


ARRAY_BODY : DATA_TYPE VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE{;}
           | VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE EQUAL VALUE {;}   

PRINT_LIST : VARIABLE_NAME {;}
            | PRINT_LIST COMMA VARIABLE_NAME {}
            | VALUE  {;}
            | PRINT_LIST COMMA  VALUE  {;}
            | ARRAY_PRINT;
            | PRINT_LIST ARRAY_PRINT;
            ;
 
ARRAY_PRINT : VARIABLE_NAME LEFT_SQUARE INT_VALUE RIGHT_SQUARE {;} 
STMT : DATA_TYPE VARIABLE_NAME EQUAL EXP {;}
     | DATA_TYPE VARIABLE_NAME {;}
     | VARIABLE_NAME  EQUAL EXP {;}
     
 
 
 
EXP : EXP PLUS EXP {;} 

    | EXP MINUS EXP {;} 
    
    | EXP MULTIPLY EXP {;} 
    
    | EXP DIVIDE EXP {;} 
                               
    | LEFT_PARAN EXP RIGHT_PARAN {;}
    |  VALUE {;}
    | VARIABLE_NAME {;}
    ;

EXP2 : EXP2 PLUS EXP2 {;} 

    | EXP2 MINUS EXP2 {;} 
    
    | EXP2 MULTIPLY EXP2 {;} 
    
    | EXP2 DIVIDE EXP2 {;} 
                               
    | LEFT_PARAN EXP2 RIGHT_PARAN {;}
    |  VALUE {;}
    | VARIABLE_NAME {;}
    ;    
VALUE : INT_VALUE {;}
      | STRING_VALUE {;}  
      | FLOAT_VALUE {;}  
      | CHAR_VALUE {;}  
      | BOOL_VALUE {;}  
      ;
 
STRUCT_BODY :  VARIABLE_NAME LEFT_BRACE STMT_LIST RIGHT_BRACE VARIABLE_LIST SEMI_COLON
                {;};
 
STMT_STRUCT : DATA_TYPE VARIABLE_NAME EQUAL EXP{;}
            | DATA_TYPE VARIABLE_NAME {;};
 
STMT_LIST : STMT_STRUCT SEMI_COLON {;}
            | STMT_LIST STMT_STRUCT SEMI_COLON {;}
 
VARIABLE_LIST : VARIABLE_NAME {;}
                | VARIABLE_LIST COMMA VARIABLE_NAME {;};

STR_OPERATION : STRCOPY LEFT_PARAN VARIABLE_NAME COMMA STRING_VALUE RIGHT_PARAN
                {;}
                | STRCOPY LEFT_PARAN VARIABLE_NAME COMMA VARIABLE_NAME RIGHT_PARAN
                {;}
                | SUBSTRING LEFT_PARAN VARIABLE_NAME COMMA STRING_VALUE RIGHT_PARAN
                {;}    
                | SUBSTRING LEFT_PARAN VARIABLE_NAME COMMA VARIABLE_NAME RIGHT_PARAN
                {;}  
                | STRCMP LEFT_PARAN VARIABLE_NAME COMMA STRING_VALUE RIGHT_PARAN
                  {;}    
                | STRCMP LEFT_PARAN VARIABLE_NAME COMMA VARIABLE_NAME RIGHT_PARAN
                  {;}
                        
                               
%%
 
 
 
int main(){

 yyparse();

}